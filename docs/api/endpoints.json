{"openapi":"3.1.0","info":{"title":"BrightWebApp API","description":"A web API for the BrightWebApp package.","version":"1.0.0"},"paths":{"/setup/useeio-database":{"post":{"summary":"Setup Useeio Database","description":"Schedules the USEEIO database setup as a background task.\n\nThis endpoint initiates a long-running process to download and install\nthe USEEIO-1.1 database if it is not already present. To avoid\nrequest timeouts, the task is scheduled to run in the background.\nThe API responds immediately with a task ID, which can be used to\npoll a status endpoint for completion.\n\nParameters\n----------\nbackground_tasks : BackgroundTasks\n    A FastAPI dependency that allows scheduling of background tasks.\n    The task is executed *after* the response has been sent. This is\n    injected by the framework and not provided by the API user.\n\nReturns\n-------\ndict\n    A dictionary confirming that the task has been accepted for processing.\n    \n    | key            | value                                                                                     |\n    | -------------- | ----------------------------------------------------------------------------------------- |\n    | `status`       | `accepted`                                                                                |\n    | `message`      | \"The USEEIO-1.1 database setup has been scheduled. This may take several minutes.\"        |\n\nNotes\n-----\nThis function is exposed as a ``POST`` endpoint. It returns an HTTP\n``202 Accepted`` status code upon successfully scheduling the task.\nThis is a \"fire-and-forget\" operation. Once the task is scheduled,\nthe API provides no further status updates or results. To monitor the\nactual progress of the download and installation, you may need to\ncheck the application's server or container logs.\n\nSee Also\n--------\n[`brightwebapp.brightway.load_and_set_useeio_project`][]\n\nExample\n-------\nTo trigger this endpoint, you can use a tool like ``curl``.\n\n**Request:**\n\n```bash\ncurl -X POST http://localhost:8080/setup/useeio-database\n```\n**Immediate Response (202 Accepted):**\n\n```json\n{\n    \"status\": \"accepted\",\n    \"message\": \"The USEEIO-1.1 database setup has been scheduled. This may take several minutes.\"\n}\n```","operationId":"setup_useeio_database_setup_useeio_database_post","responses":{"202":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetupResponse"}}}}}}},"/traversal/perform":{"post":{"summary":"Run Graph Traversal","description":"Performs a graph traversal and returns the result as a CSV file.\n\nThis endpoint serves as the primary calculation interface. It accepts a\ndetailed JSON object specifying the demand, method, and calculation\nparameters. Upon success, it directly returns a CSV file for download.\n\nParameters\n----------\nrequest : GraphTraversalRequest\n    A Pydantic model representing the structured request body. FastAPI\n    automatically validates the incoming JSON against this model. See the\n    documentation for the ``GraphTraversalRequest`` model for the exact\n    JSON structure required.\n\nReturns\n-------\nfastapi.Response\n    On success, a streaming response containing the graph traversal data\n    as a CSV file. The HTTP ``Content-Disposition`` header is set to\n    'attachment', prompting a file download in browsers.\n\nRaises\n------\nHTTPException\n    - **400 Bad Request**: Raised if the underlying calculation function\n      returns a ``ValueError``. This can occur if, for example, the\n      cutoff value is too high and no graph edges are found. The response\n      body will contain the specific error message.\n    - **500 Internal Server Error**: Raised for any other unexpected\n      exception during processing, such as providing a demand ``code``\n      that does not exist in the Brightway database.\n\nSee Also\n--------\n[`brightwebapp.traversal.perform_graph_traversal`][]\n\nExample\n-------\nTo trigger this endpoint, you must send a ``POST`` request with a JSON\nbody. The following ``curl`` command demonstrates this.\n\n**Request:**\n\n```bash\ncurl -X POST http://localhost:8080/traversal/perform \\\n-H \"Content-Type: application/json\" \\\n-d '{\n        \"demand\": [\n        { \"code\": \"some_valid_code\", \"amount\": 1 }\n        ],\n        \"method\": [\"IMPACT World+ Midpoint\", \"Climate change\", \"GWP100\"],\n        \"cutoff\": 0.005,\n        \"biosphere_cutoff\": 1e-5,\n        \"max_calc\": 10000\n    }' \\\n--output traversal_result.csv\n```\nOn success, the command will be silent and the output will be saved to\nthe file ``traversal_result.csv``.\n\n**Example Error Response (400 Bad Request):**\n\n```json\n{\n    \"detail\": \"No edges found in the graph traversal. This may be due to a cutoff value that is too high, or a demand that does not lead to any edges.\"\n}\n```","operationId":"run_graph_traversal_traversal_perform_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/GraphTraversalRequest"}}},"required":true},"responses":{"200":{"description":"Successful Response"},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}}},"components":{"schemas":{"DemandItem":{"properties":{"code":{"type":"string","title":"Code"},"amount":{"type":"number","title":"Amount"}},"type":"object","required":["code","amount"],"title":"DemandItem","description":"Represents a single functional unit in a demand request.\n\nThis model defines the structure for one item in the `demand` list\nof a graph traversal request. It specifies the unique code of an\nactivity and the amount to be assessed.\n\nAttributes\n----------\ncode: str\n    The unique string identifier (code) for the activity node in the Brightway database.\namount: float\n    The functional unit amount for this activity.\n\nExample\n-------\nThis is how a single demand item should be formatted in your JSON request:\n\n```json\n{\n    \"code\": \"some_valid_code_in_your_db\",\n    \"amount\": 1.0\n}\n```"},"GraphTraversalRequest":{"properties":{"demand":{"items":{"$ref":"#/components/schemas/DemandItem"},"type":"array","title":"Demand"},"method":{"items":{},"type":"array","title":"Method"},"cutoff":{"type":"number","title":"Cutoff","default":0.001},"biosphere_cutoff":{"type":"number","title":"Biosphere Cutoff","default":0.001},"max_calc":{"type":"integer","title":"Max Calc","default":100}},"type":"object","required":["demand","method"],"title":"GraphTraversalRequest","description":"Represents a request for performing a graph traversal.\n\nThis model defines the structure for a detailed request body\nto perform a graph traversal in the Brightway database. It includes\na list of demand items, the method for impact assessment, and\nvarious parameters for the traversal.\n\nAttributes\n----------\ndemand: list[DemandItem]\n    A list of demand items, each specifying a unique code and the amount to be assessed.\nmethod: tuple\n    A tuple specifying the impact assessment method, e.g., ('IMPACT World+ Midpoint', 'Climate change', 'GWP100').\ncutoff: float\n    The cutoff threshold for the graph traversal, default is 0.001.\nbiosphere_cutoff: float\n    The biosphere cutoff threshold for the graph traversal, default is 0.001.\nmax_calc: int\n    The maximum number of calculations to perform during the traversal, default is 100.\n\nExample\n-------\nThis is how a graph traversal request should be formatted in your JSON body:\n\n```json\n{\n    \"demand\": [\n        {\n            \"code\": \"some_valid_code_in_your_db\",\n            \"amount\": 1.0\n        }\n    ],\n    \"method\": [\"IMPACT World+ Midpoint\", \"Climate change\", \"GWP100\"],\n    \"cutoff\": 0.001,\n    \"biosphere_cutoff\": 0.001,\n    \"max_calc\": 100\n}\n```"},"HTTPValidationError":{"properties":{"detail":{"items":{"$ref":"#/components/schemas/ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"},"SetupResponse":{"properties":{"status":{"type":"string","title":"Status"},"message":{"type":"string","title":"Message"}},"type":"object","required":["status","message"],"title":"SetupResponse","description":"Response model for the setup endpoint."},"ValidationError":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"}}}}